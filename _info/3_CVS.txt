Фиксация последовательного состояния проекта заказчику.
Выполняем фиксацию ревизии.

Версия - крупная ревизия. Несколько последовательных ревизий образуют версию.

Помечаем ревизию тегом(меткой).
Заказчик начинает говорить: внесите такие изменения, получаем 3-ю ревизию.

Вдруг нам нужно вернуться ко 2-й.
CVS позволяет выполнить нам возврат к предыдущей ревизии.

branch - ветка. Ревизии, которые не войдут в проект. Это самостоятельные ревизии

Выполняем операцию слияния веток, если выясняется, что то что мы сделали хорошо.

Если ветка неудачная - мы оставляем эту ветку. 

То есть никакая информация не удаляется, а только добавляется.

Распределенные системы
Централизованные

Централизованные (subversion)
Дерево правок хранится на центральном сервере и запрашивается разработчиком по мере надобности. 
Использование их не рекомендуется в новых проектах. 

Для новых проектов распределенные.
Дерево правок у каждого разработчика хранится. 
Дерево правок хранится в репозитарии.

Распределенная система может использовать централизованную систему, но копия по прежнему хранится у каждого разработчика.

Разработчик может работать не контача с центральным сервером.

Он может фиксировать правки не по одной. Он может создать 20 ревизий и отправить их на центральный сервере

Git - линукс
Mercurial - Firefox
Bazaar - убунту линукс

Tortoise Git
Tortoise Hg
Tortoise Bzr
C:\Program Files\Git\bin

Команды Git Bash:

проверка статуса - 
git status

добавление файла - 
git add file.cpp

игнорировать локальный файл - 
echo Store.pro.user >>.gitignore
git add .gitignore

удаление файла - 
git rm --cached Store.pro.user

Удаление файла из репозитория - 
git rm filename

добавление в репозитарий - 
git commit -m "Initial commit"

При добавлении git ругается, что не понятно от кого отправлять коммит.
Регистрируем себя
git config user.name "Vladimir Bervin"
git config user.email "vladimir.bervin@gmail.com"










