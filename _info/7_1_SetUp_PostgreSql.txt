Установка программы:
 1) Папку установки оставляем без изменений
 2) Папку для хранения данных не выбираем на диске С.
    Выбираем её на другом диске и проследим, чтобы эта папка не была расшарена по сети.
 3) Установим пароль сисадмина, например admin
 4) Далее порт, менять не имеет смысла
 5) Локаль нас не волнует, все равно мы работаем через Qt
 6) Ставим на установку
 7) Оставляем галочку Stack Builder
 8) Выбираем PostgreSql
 9) Database Drivers - можно установить все
 10) Spatial Extentions -> PostGis (вреда не будет, в случае Store не   устанавливаем)
 11) Registration-required -> 
     EnterpriseDb Tools ->
	 к клиентопроприетарным программам. В случае Store не нужны.
 12) Далее идёт установка дополнительных программ
 
 
Создание текста базы данных в текстовом файле с расширением .sql:
 - id, comment, level - ключевые слова, меняем их на что-то другое
 - serial - автоинкрементное поле
 - по возможности не используем varchar в PostgreSql, используем text
 - timestamp - время в PostgreSql
 - default CURRENT_TIMESTAMP - время по умолчанию
 
 
 Создание базы данных в программе PgAdminIII:
 1) Открываем программу PgAdminIII
 2) Входим в базу с паролем, который ранее установили (admin). Сохранять пароль не надо
 3) Первое что делаем - создаём user (Роли входа). 
    Нам нужны два пользователя: администратор и простой пользователь. Но мы пока создадим одного. 
 4) Создаём новую роль admin. Во вкладке "Определение" создадим пароль, например 1234
 5) Далее создаём базу данных (Базы данных). Назовём Store
 6) Назначим владельца базе данных - admin
 7) Во вкладке "Определение" убеждаемся, что кодировка стоит UTF-8
 8) Отключаемся от сервера
 9) Снова подключаемся, но через вкладку "Свойства" + сохранить
 10) Теперь можно подключаться через вкладку "Подключение"
 11) Кликаем на нашу базу данных, вверху появляется значок SQL, нажимаем на него
 12) Либо открываем созданный файл с расширением .sql, либо копируем текст в верхнее окно вкладки
 13) Кликаем на кнопку "Выполнить запрос" и создаём тем самым базу данных
 14) Store -> Схемы -> Public можно выйти на нашу таблицу, просмотреть данные таблицы
 
Подключение базы данных в Qt:
 1) Добавить QT =+ sql в файл с расширением .pro
 2) #include <QtSql> в application.cpp, хотя можно было подключать файлы по отдельности. В данном случае подключен весь модуль QtSql
 3) QSqlDatabase db - объект для подключения к БД.
    QSqlDatabase db = QSqlDatabase::addDatabase("QPSQL"); создаём объект, а не указатель
	Подключение создаётся не конструктором класса, а специальной функцией addDatabase
	Через драйвер CBase также можно подключиться (на виндоус). MSSql совместим с CBase на уровне подключения.
	При необходимости мы можем указать имя подключения:
	QSqlDatabase db = QSqlDatabase::addDatabase("QPSQL", "MyDadaBase");
	Делаем вывод, что подключений к базе данных может быть несколько
	Если имя не проставляем, то это подключение считается главным.
	Такой механизм придуман для того чтобы подключение к базе данных было доступно из любой точки программы
 4) Программа скомпилировалась, но выдаёт сообщение, что драйвер не загружен. Следовательно есть доступ к статическим библиотекам, но нет доступа к родным библиотекам базы данных PostgreSql
 C:\Program Files (x86)\PostgreSQL\9.5\bin - здесь находим те библиотеки, которые нужны для запуска нашей базы
 Если мы хотим чтобы наша программа работала на клиентском компьютере есть 2 способа:
 1. прописать в переменные среды путь к папке с библиотеками (если у клиента установлен сервер)
 2. Положить 4 библиотеки рядом с исполняемым файлом
    libintl-8.dll
	libpq.dll
    libeay32.dll
	libssl-1_1.dll
	
 
	
 
											
											
 
 